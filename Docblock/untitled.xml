<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. -->
<!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "docbookV4.5/docbookx.dtd" []>
<appendix>
  <article>
  <info>
    <title>dmt Translater</title>
  </info>
  <para>(браузерное расширение)</para>
  <para>Использован Kango фреймворк</para>
  <section>
    <title>Пример 1: Нажатие на иконки расширения</title>
    <para>Задаем путь к файлу, содержащую информацию </para>
    <para>Задаем обработчик нажатия</para>
    <para>Отображаем информацию и свойства при нажатии на иконку </para>
    <programlisting> 
    BrowserButton.prototype = object.extend(BrowserButtonBase, {
        _onClicked: function() {
            return this.fireEvent(this.event.COMMAND)
        },
        _initDetails: function(t) {
            object.isObject(t) && (object.isString(t.icon) && this.setIcon(t.icon), object.isString(t.caption) && this.setCaption(t.caption) && info)
        },
        setTooltipText: function(t) {
            chrome.browserAction.setTitle({
            title: t.toString()
            })
        },
        setCaption: function(t) {}, //todo
        setIcon: function(t) {
            chrome.browserAction.setIcon({
                path: io.getFileUrl(t)
            })
        },
        setBadgeValue: function(t) {
           chrome.browserAction.setBadgeText({
                text: null != t && 0 != t ? t.toString() : ""
            })
        },
        setBadgeBackgroundColor: function(t) {
            chrome.browserAction.setBadgeBackgroundColor({
                color: t
            })
    </programlisting>
  </section>
  <section>
    <title>Пример 2: Получение информации с json файла</title>
    <para></para>
    <para>Задаем метод для получения</para>
    <para>Задаем формат получаемого текста</para>
    <para>Задаем параметры, которые хотим получить</para>
    <para>Изменяем положение джостика.</para>
    <programlisting> 
    function ExtensionInfo(t) {
        this.getRawData = function() {
            return object.clone(t)
        }, this.update = function(i) {
            object.mixin(t, i), object.mixin(this, i)
        }, this.name = "", this.version = "", this.description = "", this.creator = "", this.browser_button = null, this.update_path_url = ""
    }
    var getExtensionInfo = function() {
        var e = new XMLHttpRequest;
        return e.open("GET", chrome.extension.getURL("info.json"), !1), e.overrideMimeType("text/plain"), e.send(null), JSON.parse(e.responseText)
    };
    </programlisting>
  </section>
  <section>
    <title>Пример 3: Использование внешнего API для перевода</title>
    <para>Задаем язык перевода</para>
    <para>Отправляем POST запрос</para>
    <para>Ожидаем GET запроса полученного перевода</para>
    <para>Отображаем перевод</para>
    <programlisting> 
    function s(t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "en",
            n = "en" === e ? "https://translate.googleapis.com/translate_a/single?client=gtx&sl=en&tl=ru&dt=t" : "https://translate.googleapis.com/translate_a/single?client=gtx&sl=ru&tl=en&dt=t";
        return (0, x.promisedXhr)(n, {
            method: "POST",
            params: {
                q: encodeURIComponent(t)
            }
        }).then(l, f)

        f = "en" === "https://translate.googleapis.com/translate_a/single?client=gtx&sl=en&tl=ru&dt=t" : "https://translate.googleapis.com/translate_a/single?client=gtx&sl=ru&tl=en&dt=t";
        return (0, x.promisedXhr)(n, {
            method: "GET",
            params: {
                q: encodeURIComponent(t)
            }
        });
    }

    function show(f) {
        h.showPopUp(f);
    }
    </programlisting>
  </section>
</article>
</appendix>